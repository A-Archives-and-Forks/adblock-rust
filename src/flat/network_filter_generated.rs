// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod fb {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_FILTER_PART_TYPE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_FILTER_PART_TYPE: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_FILTER_PART_TYPE: [FilterPartType; 3] = [
  FilterPartType::EMPTY,
  FilterPartType::SIMPLE,
  FilterPartType::ANY_OF,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct FilterPartType(pub u8);
#[allow(non_upper_case_globals)]
impl FilterPartType {
  pub const EMPTY: Self = Self(0);
  pub const SIMPLE: Self = Self(1);
  pub const ANY_OF: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::EMPTY,
    Self::SIMPLE,
    Self::ANY_OF,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::EMPTY => Some("EMPTY"),
      Self::SIMPLE => Some("SIMPLE"),
      Self::ANY_OF => Some("ANY_OF"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for FilterPartType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for FilterPartType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for FilterPartType {
    type Output = FilterPartType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for FilterPartType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for FilterPartType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for FilterPartType {}
pub enum FlatNetworkFilterOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FlatNetworkFilter<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FlatNetworkFilter<'a> {
    type Inner = FlatNetworkFilter<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> FlatNetworkFilter<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        FlatNetworkFilter { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args FlatNetworkFilterArgs<'args>) -> flatbuffers::WIPOffset<FlatNetworkFilter<'bldr>> {
      let mut builder = FlatNetworkFilterBuilder::new(_fbb);
      builder.add_opt_not_domains_union(args.opt_not_domains_union);
      builder.add_opt_domains_union(args.opt_domains_union);
      builder.add_id(args.id);
      if let Some(x) = args.raw_line { builder.add_raw_line(x); }
      if let Some(x) = args.tag { builder.add_tag(x); }
      builder.add_bug(args.bug);
      if let Some(x) = args.csp { builder.add_csp(x); }
      if let Some(x) = args.hostname { builder.add_hostname(x); }
      if let Some(x) = args.redirect { builder.add_redirect(x); }
      if let Some(x) = args.opt_not_domains { builder.add_opt_not_domains(x); }
      if let Some(x) = args.opt_domains { builder.add_opt_domains(x); }
      if let Some(x) = args.filter_part_inner { builder.add_filter_part_inner(x); }
      builder.add_mask(args.mask);
      builder.add_filter_part_type(args.filter_part_type);
      builder.finish()
    }

    pub const VT_MASK: flatbuffers::VOffsetT = 4;
    pub const VT_FILTER_PART_TYPE: flatbuffers::VOffsetT = 6;
    pub const VT_FILTER_PART_INNER: flatbuffers::VOffsetT = 8;
    pub const VT_OPT_DOMAINS: flatbuffers::VOffsetT = 10;
    pub const VT_OPT_NOT_DOMAINS: flatbuffers::VOffsetT = 12;
    pub const VT_REDIRECT: flatbuffers::VOffsetT = 14;
    pub const VT_HOSTNAME: flatbuffers::VOffsetT = 16;
    pub const VT_CSP: flatbuffers::VOffsetT = 18;
    pub const VT_BUG: flatbuffers::VOffsetT = 20;
    pub const VT_TAG: flatbuffers::VOffsetT = 22;
    pub const VT_RAW_LINE: flatbuffers::VOffsetT = 24;
    pub const VT_ID: flatbuffers::VOffsetT = 26;
    pub const VT_OPT_DOMAINS_UNION: flatbuffers::VOffsetT = 28;
    pub const VT_OPT_NOT_DOMAINS_UNION: flatbuffers::VOffsetT = 30;

  #[inline]
  pub fn mask(&self) -> u32 {
    self._tab.get::<u32>(FlatNetworkFilter::VT_MASK, Some(0)).unwrap()
  }
  #[inline]
  pub fn filter_part_type(&self) -> FilterPartType {
    self._tab.get::<FilterPartType>(FlatNetworkFilter::VT_FILTER_PART_TYPE, Some(FilterPartType::EMPTY)).unwrap()
  }
  #[inline]
  pub fn filter_part_inner(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FlatNetworkFilter::VT_FILTER_PART_INNER, None)
  }
  #[inline]
  pub fn opt_domains(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(FlatNetworkFilter::VT_OPT_DOMAINS, None)
  }
  #[inline]
  pub fn opt_not_domains(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(FlatNetworkFilter::VT_OPT_NOT_DOMAINS, None)
  }
  #[inline]
  pub fn redirect(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlatNetworkFilter::VT_REDIRECT, None)
  }
  #[inline]
  pub fn hostname(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlatNetworkFilter::VT_HOSTNAME, None)
  }
  #[inline]
  pub fn csp(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlatNetworkFilter::VT_CSP, None)
  }
  #[inline]
  pub fn bug(&self) -> u32 {
    self._tab.get::<u32>(FlatNetworkFilter::VT_BUG, Some(0)).unwrap()
  }
  #[inline]
  pub fn tag(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlatNetworkFilter::VT_TAG, None)
  }
  #[inline]
  pub fn raw_line(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlatNetworkFilter::VT_RAW_LINE, None)
  }
  #[inline]
  pub fn id(&self) -> u64 {
    self._tab.get::<u64>(FlatNetworkFilter::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn opt_domains_union(&self) -> u64 {
    self._tab.get::<u64>(FlatNetworkFilter::VT_OPT_DOMAINS_UNION, Some(0)).unwrap()
  }
  #[inline]
  pub fn opt_not_domains_union(&self) -> u64 {
    self._tab.get::<u64>(FlatNetworkFilter::VT_OPT_NOT_DOMAINS_UNION, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for FlatNetworkFilter<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>(&"mask", Self::VT_MASK, false)?
     .visit_field::<FilterPartType>(&"filter_part_type", Self::VT_FILTER_PART_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>(&"filter_part_inner", Self::VT_FILTER_PART_INNER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>(&"opt_domains", Self::VT_OPT_DOMAINS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>(&"opt_not_domains", Self::VT_OPT_NOT_DOMAINS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"redirect", Self::VT_REDIRECT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"hostname", Self::VT_HOSTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"csp", Self::VT_CSP, false)?
     .visit_field::<u32>(&"bug", Self::VT_BUG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"tag", Self::VT_TAG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"raw_line", Self::VT_RAW_LINE, false)?
     .visit_field::<u64>(&"id", Self::VT_ID, false)?
     .visit_field::<u64>(&"opt_domains_union", Self::VT_OPT_DOMAINS_UNION, false)?
     .visit_field::<u64>(&"opt_not_domains_union", Self::VT_OPT_NOT_DOMAINS_UNION, false)?
     .finish();
    Ok(())
  }
}
pub struct FlatNetworkFilterArgs<'a> {
    pub mask: u32,
    pub filter_part_type: FilterPartType,
    pub filter_part_inner: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub opt_domains: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub opt_not_domains: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
    pub redirect: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hostname: Option<flatbuffers::WIPOffset<&'a str>>,
    pub csp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bug: u32,
    pub tag: Option<flatbuffers::WIPOffset<&'a str>>,
    pub raw_line: Option<flatbuffers::WIPOffset<&'a str>>,
    pub id: u64,
    pub opt_domains_union: u64,
    pub opt_not_domains_union: u64,
}
impl<'a> Default for FlatNetworkFilterArgs<'a> {
    #[inline]
    fn default() -> Self {
        FlatNetworkFilterArgs {
            mask: 0,
            filter_part_type: FilterPartType::EMPTY,
            filter_part_inner: None,
            opt_domains: None,
            opt_not_domains: None,
            redirect: None,
            hostname: None,
            csp: None,
            bug: 0,
            tag: None,
            raw_line: None,
            id: 0,
            opt_domains_union: 0,
            opt_not_domains_union: 0,
        }
    }
}
pub struct FlatNetworkFilterBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FlatNetworkFilterBuilder<'a, 'b> {
  #[inline]
  pub fn add_mask(&mut self, mask: u32) {
    self.fbb_.push_slot::<u32>(FlatNetworkFilter::VT_MASK, mask, 0);
  }
  #[inline]
  pub fn add_filter_part_type(&mut self, filter_part_type: FilterPartType) {
    self.fbb_.push_slot::<FilterPartType>(FlatNetworkFilter::VT_FILTER_PART_TYPE, filter_part_type, FilterPartType::EMPTY);
  }
  #[inline]
  pub fn add_filter_part_inner(&mut self, filter_part_inner: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatNetworkFilter::VT_FILTER_PART_INNER, filter_part_inner);
  }
  #[inline]
  pub fn add_opt_domains(&mut self, opt_domains: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatNetworkFilter::VT_OPT_DOMAINS, opt_domains);
  }
  #[inline]
  pub fn add_opt_not_domains(&mut self, opt_not_domains: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatNetworkFilter::VT_OPT_NOT_DOMAINS, opt_not_domains);
  }
  #[inline]
  pub fn add_redirect(&mut self, redirect: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatNetworkFilter::VT_REDIRECT, redirect);
  }
  #[inline]
  pub fn add_hostname(&mut self, hostname: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatNetworkFilter::VT_HOSTNAME, hostname);
  }
  #[inline]
  pub fn add_csp(&mut self, csp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatNetworkFilter::VT_CSP, csp);
  }
  #[inline]
  pub fn add_bug(&mut self, bug: u32) {
    self.fbb_.push_slot::<u32>(FlatNetworkFilter::VT_BUG, bug, 0);
  }
  #[inline]
  pub fn add_tag(&mut self, tag: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatNetworkFilter::VT_TAG, tag);
  }
  #[inline]
  pub fn add_raw_line(&mut self, raw_line: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatNetworkFilter::VT_RAW_LINE, raw_line);
  }
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(FlatNetworkFilter::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_opt_domains_union(&mut self, opt_domains_union: u64) {
    self.fbb_.push_slot::<u64>(FlatNetworkFilter::VT_OPT_DOMAINS_UNION, opt_domains_union, 0);
  }
  #[inline]
  pub fn add_opt_not_domains_union(&mut self, opt_not_domains_union: u64) {
    self.fbb_.push_slot::<u64>(FlatNetworkFilter::VT_OPT_NOT_DOMAINS_UNION, opt_not_domains_union, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FlatNetworkFilterBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FlatNetworkFilterBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FlatNetworkFilter<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for FlatNetworkFilter<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("FlatNetworkFilter");
      ds.field("mask", &self.mask());
      ds.field("filter_part_type", &self.filter_part_type());
      ds.field("filter_part_inner", &self.filter_part_inner());
      ds.field("opt_domains", &self.opt_domains());
      ds.field("opt_not_domains", &self.opt_not_domains());
      ds.field("redirect", &self.redirect());
      ds.field("hostname", &self.hostname());
      ds.field("csp", &self.csp());
      ds.field("bug", &self.bug());
      ds.field("tag", &self.tag());
      ds.field("raw_line", &self.raw_line());
      ds.field("id", &self.id());
      ds.field("opt_domains_union", &self.opt_domains_union());
      ds.field("opt_not_domains_union", &self.opt_not_domains_union());
      ds.finish()
  }
}
pub enum FlatNetworkFilterStorageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FlatNetworkFilterStorage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FlatNetworkFilterStorage<'a> {
    type Inner = FlatNetworkFilterStorage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> FlatNetworkFilterStorage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        FlatNetworkFilterStorage { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args FlatNetworkFilterStorageArgs<'args>) -> flatbuffers::WIPOffset<FlatNetworkFilterStorage<'bldr>> {
      let mut builder = FlatNetworkFilterStorageBuilder::new(_fbb);
      if let Some(x) = args.global_list { builder.add_global_list(x); }
      builder.finish()
    }

    pub const VT_GLOBAL_LIST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn global_list(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FlatNetworkFilter<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FlatNetworkFilter>>>>(FlatNetworkFilterStorage::VT_GLOBAL_LIST, None)
  }
}

impl flatbuffers::Verifiable for FlatNetworkFilterStorage<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FlatNetworkFilter>>>>(&"global_list", Self::VT_GLOBAL_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct FlatNetworkFilterStorageArgs<'a> {
    pub global_list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FlatNetworkFilter<'a>>>>>,
}
impl<'a> Default for FlatNetworkFilterStorageArgs<'a> {
    #[inline]
    fn default() -> Self {
        FlatNetworkFilterStorageArgs {
            global_list: None,
        }
    }
}
pub struct FlatNetworkFilterStorageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FlatNetworkFilterStorageBuilder<'a, 'b> {
  #[inline]
  pub fn add_global_list(&mut self, global_list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<FlatNetworkFilter<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlatNetworkFilterStorage::VT_GLOBAL_LIST, global_list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FlatNetworkFilterStorageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FlatNetworkFilterStorageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FlatNetworkFilterStorage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for FlatNetworkFilterStorage<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("FlatNetworkFilterStorage");
      ds.field("global_list", &self.global_list());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_flat_network_filter_storage<'a>(buf: &'a [u8]) -> FlatNetworkFilterStorage<'a> {
  unsafe { flatbuffers::root_unchecked::<FlatNetworkFilterStorage<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_flat_network_filter_storage<'a>(buf: &'a [u8]) -> FlatNetworkFilterStorage<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<FlatNetworkFilterStorage<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `FlatNetworkFilterStorage`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flat_network_filter_storage_unchecked`.
pub fn root_as_flat_network_filter_storage(buf: &[u8]) -> Result<FlatNetworkFilterStorage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<FlatNetworkFilterStorage>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `FlatNetworkFilterStorage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_flat_network_filter_storage_unchecked`.
pub fn size_prefixed_root_as_flat_network_filter_storage(buf: &[u8]) -> Result<FlatNetworkFilterStorage, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<FlatNetworkFilterStorage>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `FlatNetworkFilterStorage` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flat_network_filter_storage_unchecked`.
pub fn root_as_flat_network_filter_storage_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlatNetworkFilterStorage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<FlatNetworkFilterStorage<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `FlatNetworkFilterStorage` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flat_network_filter_storage_unchecked`.
pub fn size_prefixed_root_as_flat_network_filter_storage_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlatNetworkFilterStorage<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<FlatNetworkFilterStorage<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a FlatNetworkFilterStorage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `FlatNetworkFilterStorage`.
pub unsafe fn root_as_flat_network_filter_storage_unchecked(buf: &[u8]) -> FlatNetworkFilterStorage {
  flatbuffers::root_unchecked::<FlatNetworkFilterStorage>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed FlatNetworkFilterStorage and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `FlatNetworkFilterStorage`.
pub unsafe fn size_prefixed_root_as_flat_network_filter_storage_unchecked(buf: &[u8]) -> FlatNetworkFilterStorage {
  flatbuffers::size_prefixed_root_unchecked::<FlatNetworkFilterStorage>(buf)
}
#[inline]
pub fn finish_flat_network_filter_storage_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<FlatNetworkFilterStorage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_flat_network_filter_storage_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<FlatNetworkFilterStorage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod fb

